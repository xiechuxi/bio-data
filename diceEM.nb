(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     64829,       1559]
NotebookOptionsPosition[     54885,       1400]
NotebookOutlinePosition[     55238,       1416]
CellTagsIndexPosition[     55195,       1413]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"binCounts", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", " ", "0"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "2"}], "}"}]}], "}"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"updateProbs", "[", 
    RowBox[{"binCounts", ",", 
     RowBox[{"{", 
      RowBox[{"0.5", ",", "0.5", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "0"}], "}"}]}], "}"}], ",", " ", "True"}], 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.744301175324122*^9, 3.7443011923931017`*^9}, {
  3.7443013686195498`*^9, 3.744301370154214*^9}, {3.744301437780951*^9, 
  3.7443014397548857`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"c5272d7f-f0ea-4ef5-acf6-b44e90c179c6"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"oldLikelihood = \"\>", "\[InvisibleSpace]", "0.25`"}],
  SequenceForm["oldLikelihood = ", 0.25],
  Editable->False]], "Print",
 CellChangeTimes->{3.744301440418947*^9},
 CellLabel->
  "During evaluation of \
In[54]:=",ExpressionUUID->"432d3b74-fdef-4ff1-a2a3-5e94b745bd1e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"posteriors = \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", "1.`"}], "}"}]}],
  SequenceForm["posteriors = ", {0., 1.}],
  Editable->False]], "Print",
 CellChangeTimes->{3.744301440425946*^9},
 CellLabel->
  "During evaluation of \
In[54]:=",ExpressionUUID->"73be76b3-9e77-4ad4-9ae2-7a91b99a8378"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.5`", ",", "0.5`", ",", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", "1.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.`", ",", "0.`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.744301321847019*^9, 3.7443013708097553`*^9, 
  3.744301440488968*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"4ba8706c-2dae-46c8-aed8-75f6ae90fc46"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Dice EM assignment", "Title",
 CellChangeTimes->{{3.5855109621349773`*^9, 
  3.5855109786207867`*^9}},ExpressionUUID->"8e37900a-06a9-4123-915e-\
f87a3654f422"],

Cell["\<\
This assignment involves writing some code for an EM algorithm and then \
testing it, doing some experiments, and answering some questions. Please \
write your answers below the questions and turn this notebook in with your \
code.\
\>", "Text",
 CellChangeTimes->{{3.585512475580336*^9, 
  3.5855125543489027`*^9}},ExpressionUUID->"505d0b61-07b1-4cfc-9536-\
78d1d170cc64"],

Cell[CellGroupData[{

Cell["Coding", "Section",
 CellChangeTimes->{{3.5855110461522093`*^9, 
  3.58551104688463*^9}},ExpressionUUID->"24712caf-4e80-4c5f-9b32-\
04c63e5ac3c9"],

Cell[TextData[{
 StyleBox["This is a continuation of the ",
  FontColor->Automatic],
 StyleBox["diceSample",
  FontWeight->"Bold",
  FontColor->Automatic],
 StyleBox[" and ",
  FontColor->Automatic],
 StyleBox["dicePosterior",
  FontWeight->"Bold",
  FontColor->Automatic],
 StyleBox[" assignments.  In these assignments, we have a bag containing two \
types of dice with different probabilities of rolling each number (also \
referred to as a \[OpenCurlyDoubleQuote]face\[CloseCurlyDoubleQuote] of the \
die).  Someone selects a die from the bag at random, rolls it a fixed number \
of times, reports the outcomes, returns it to the bag, and repeats the \
process.  Here, you will write code to run the EM (Expectation Maximization) \
algorithm to estimate the parameters of the system -- the probability of \
drawing each die type and the conditional probability of each face given the \
die type.\n\nThis notebook provides a brief overview of the assignment but \
you\[CloseCurlyQuote]ll have to read the code for detailed instructions.",
  FontColor->Automatic]
}], "Text",
 CellChangeTimes->{{3.585511054430279*^9, 3.585511089917618*^9}, {
  3.585511121620488*^9, 3.585511188876453*^9}, {3.585511236981254*^9, 
  3.585511531292819*^9}, {3.585589550249552*^9, 3.5855895528959713`*^9}, {
  3.585589618879745*^9, 3.585589736988511*^9}, {3.58558982569786*^9, 
  3.585589837879303*^9}, {3.5855898971032*^9, 3.585589953134733*^9}, {
  3.5855899947739897`*^9, 3.5855899989980288`*^9}, {3.585590530378899*^9, 
  3.585590619913625*^9}, {3.585678954137244*^9, 3.585678994249689*^9}, {
  3.585915486586301*^9, 3.5859154875789137`*^9}, {3.585915517778281*^9, 
  3.5859155219063597`*^9}, {3.5860220289383497`*^9, 3.586022029501439*^9}, {
  3.743443017709264*^9, 3.7434430308148203`*^9}, {3.744299059646576*^9, 
  3.744299108790731*^9}, {3.744299262114436*^9, 3.744299263880373*^9}},
 FontColor->RGBColor[
  0.5, 0, 0.5],ExpressionUUID->"8c71f104-f42d-4567-b5f8-3d1cad62fd44"],

Cell[CellGroupData[{

Cell["Input and output", "Subsection",
 CellChangeTimes->{{3.58558939219401*^9, 3.5855893941449203`*^9}},
 FontColor->Automatic,ExpressionUUID->"7a1330da-0714-4548-9369-8dc426627bbc"],

Cell[TextData[{
 StyleBox["The top level function is called ",
  FontColor->Automatic],
 StyleBox["diceEM.",
  FontFamily->"Courier New",
  FontColor->Automatic]
}], "Text",
 CellChangeTimes->{
  3.585589466096129*^9, {3.7442992679018927`*^9, 3.744299461403063*^9}, 
   3.744299497738888*^9, {3.744299561995994*^9, 
   3.744299562779904*^9}},ExpressionUUID->"e256fb37-fdbb-4d50-8643-\
9a9827194716"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.5855894336454363`*^9, 3.585589433646515*^9}, {
   3.744299196378585*^9, 3.744299197295188*^9}, 3.7464757578226757`*^9, {
   3.7464759112264833`*^9, 3.746475921529263*^9}, {3.7464760592123747`*^9, 
   3.746476063395055*^9}, 
   3.7464761222174883`*^9},ExpressionUUID->"72d9a4d1-7dbd-4150-b1dc-\
ba767ccf2d07"],

Cell[BoxData[
 RowBox[{
  RowBox[{"diceSample", "[", 
   RowBox[{
   "numType1_", ",", " ", "numType2_", ",", " ", "type1_", ",", " ", "type2_",
     ",", " ", "draws_", ",", " ", "rollsPerDraw_"}], "]"}], " ", ":=", "\n", 
  
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"numType1d", "=", 
       RowBox[{"EmpiricalDistribution", "[", 
        RowBox[{"type1", "->", 
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "type1", "]"}], "]"}]}], "]"}]}], 
      RowBox[{"(*", 
       RowBox[{"distribution", " ", "of", " ", "type1", " ", "dice1"}], 
       "*)"}], ",", "\n", 
      RowBox[{"numType2d", "=", 
       RowBox[{"EmpiricalDistribution", "[", 
        RowBox[{"type2", "->", 
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "type2", "]"}], "]"}]}], "]"}]}]}], 
     RowBox[{"(*", 
      RowBox[{"distribution", " ", "of", " ", "type1", " ", "dice2"}], "*)"}],
      "}"}], ",", "\n", 
    RowBox[{"MatrixForm", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"If", " ", "[", 
        RowBox[{
         RowBox[{"1", "==", 
          RowBox[{"RandomVariate", "[", 
           RowBox[{"BernoulliDistribution", "[", 
            RowBox[{"numType1", "/", 
             RowBox[{"(", 
              RowBox[{"numType1", "+", "numType2"}], ")"}]}], "]"}], "]"}]}], 
         ",", "\n", 
         RowBox[{"RandomVariate", "[", 
          RowBox[{"numType1d", ",", "rollsPerDraw"}], "]"}], ",", "\n", 
         RowBox[{"RandomVariate", "[", 
          RowBox[{"numType2d", ",", "rollsPerDraw"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", "draws"}], "}"}]}], "]"}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.746475752508912*^9, 3.746475752511085*^9}, {
  3.7464762764751053`*^9, 3.746476282204605*^9}},
 CellLabel->
  "In[555]:=",ExpressionUUID->"cc077a52-25c7-458f-9fe2-64b7fa409fb3"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"dicePosterior", "[", 
     RowBox[{
     "binCounts_", ",", " ", "type1Prior_", ",", " ", "type2Prior_", ",", " ",
       "faceProbs1_", ",", " ", "faceProbs2_"}], "]"}], " ", ":=", " ", "\n", 
    
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"(*", 
        RowBox[{"replace", " ", "all", " ", 
         RowBox[{"zeros", "^", "zeros"}], " ", "with", " ", "one"}], "*)"}], 
       "\n", 
       RowBox[{
        RowBox[{"P1", "=", 
         RowBox[{"Fold", "[", 
          RowBox[{"Times", ",", 
           RowBox[{"Diagonal", "[", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"faceProbs1", "^", 
                RowBox[{"binCounts", "[", 
                 RowBox[{"[", "j", "]"}], "]"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"j", ",", "1", ",", 
                 RowBox[{"Length", "[", "binCounts", "]"}]}], "}"}]}], "]"}], 
             "/.", 
             RowBox[{"Indeterminate", "->", " ", "1"}]}], "]"}]}], "]"}]}], 
        ",", " ", "\n", 
        RowBox[{"P2", "=", 
         RowBox[{"Fold", "[", 
          RowBox[{"Times", ",", 
           RowBox[{"Diagonal", "[", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"faceProbs2", "^", 
                RowBox[{"binCounts", "[", 
                 RowBox[{"[", "j", "]"}], "]"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"j", ",", "1", ",", 
                 RowBox[{"Length", "[", "binCounts", "]"}]}], "}"}]}], "]"}], 
             "/.", 
             RowBox[{"Indeterminate", "->", " ", "1"}]}], "]"}]}], "]"}]}]}], 
       "}"}], ",", "\n", 
      RowBox[{"type1Prior", "*", 
       RowBox[{"P1", "/", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"type1Prior", "*", "P1"}], "+", 
          RowBox[{"type2Prior", "*", "P2"}]}], ")"}]}]}]}], "]"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"diceEM", "[", 
     RowBox[{"trials_", ",", "maxIterations_", ",", "accuracy_"}], "]"}], ":=",
     " ", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{"diceSample", "[", 
      RowBox[{"4", ",", "5", ",", 
       RowBox[{"{", 
        RowBox[{
        "0.1", ",", "0.1", ",", "0.1", ",", "0.4", ",", "0.2", ",", "0.1"}], 
        "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "0.1", ",", "0.2", ",", "0.3", ",", "0.1", ",", "0.1", ",", "0.2"}], 
        "}"}], ",", "trials", ",", "n"}], "]"}], " ", 
     "\[IndentingNewLine]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.746476127889997*^9, 3.7464761448209553`*^9}, {
   3.746476207300156*^9, 3.746476227690372*^9}, 3.746476300327201*^9, 
   3.7464803852400217`*^9},ExpressionUUID->"f4b47f5d-79d8-4933-8d77-\
07f3612ff1aa"],

Cell[BoxData[
 RowBox[{
  RowBox[{"parameters", "=", " ", 
   RowBox[{"{", 
    RowBox[{"0.3", ",", "0.7", ",", 
     RowBox[{"{", 
      RowBox[{
      "0.1", ",", "0.1", ",", "0.1", ",", "0.4", ",", "0.2", ",", "0.1"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "0.1", ",", "0.2", ",", "0.3", ",", "0.1", ",", "0.1", ",", "0.2"}], 
      "}"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.746475885884643*^9, 3.746475900444223*^9}, {
  3.7464762886791983`*^9, 3.7464762977416773`*^9}, {3.7464803286895647`*^9, 
  3.746480392190374*^9}},
 CellLabel->
  "In[558]:=",ExpressionUUID->"6e0e4f79-7cf5-4fbb-9470-9b974cf2f5ce"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"type1Prob", "[", "parameters", "]"}], " ", "=", " ", 
  RowBox[{"parameters", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\n", 
 RowBox[{" ", 
  RowBox[{
   RowBox[{"type2Prob", "[", "parameters", "]"}], " ", "=", " ", 
   RowBox[{"parameters", "[", 
    RowBox[{"[", "2", "]"}], "]"}]}]}], "\n", 
 RowBox[{" ", 
  RowBox[{
   RowBox[{"faceProbs1", "[", "parameters", "]"}], " ", "=", " ", 
   RowBox[{"parameters", "[", 
    RowBox[{"[", "3", "]"}], "]"}]}]}], "\n", 
 RowBox[{" ", 
  RowBox[{
   RowBox[{"faceProbs2", "[", "parameters", "]"}], " ", "=", " ", 
   RowBox[{"parameters", "[", 
    RowBox[{"[", "4", "]"}], "]"}]}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{
  3.7464804054287453`*^9, {3.746480443910836*^9, 3.746480448014908*^9}, {
   3.7464804850219297`*^9, 3.7464805121144133`*^9}},
 CellLabel->
  "In[587]:=",ExpressionUUID->"bf920eb7-46d6-4d2c-b55c-dbd576c946e8"],

Cell[BoxData["0.3`"], "Output",
 CellChangeTimes->{{3.7464805044467707`*^9, 3.74648051397287*^9}},
 CellLabel->
  "Out[587]=",ExpressionUUID->"ddb9a736-36fb-4a9f-8bca-9623234dc2f4"],

Cell[BoxData["0.7`"], "Output",
 CellChangeTimes->{{3.7464805044467707`*^9, 3.746480513988614*^9}},
 CellLabel->
  "Out[588]=",ExpressionUUID->"8678c81f-7bef-44e4-bbe6-3f04de7c6c42"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.1`", ",", "0.1`", ",", "0.1`", ",", "0.4`", ",", "0.2`", ",", "0.1`"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.7464805044467707`*^9, 3.746480513998317*^9}},
 CellLabel->
  "Out[589]=",ExpressionUUID->"58060427-24a8-4190-b9a8-c1b91041c2dd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.1`", ",", "0.2`", ",", "0.3`", ",", "0.1`", ",", "0.1`", ",", "0.2`"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.7464805044467707`*^9, 3.746480514008216*^9}},
 CellLabel->
  "Out[590]=",ExpressionUUID->"7f795894-b72a-46b9-bc04-04878fc62e53"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "13433", "]"}], ";", 
  RowBox[{"RandomReal", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.746480616003354*^9, 3.746480669009881*^9}},
 CellLabel->
  "In[601]:=",ExpressionUUID->"99343a89-9728-4619-aa1f-49f3cd311fc6"],

Cell[BoxData["0.14797066910108736`"], "Output",
 CellChangeTimes->{{3.746480629774284*^9, 3.746480670427709*^9}},
 CellLabel->
  "Out[601]=",ExpressionUUID->"84021bb7-74fe-4a3f-aee0-dd508ad7baef"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1", "]"}], ";", 
  RowBox[{"RandomReal", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.7464811835262623`*^9, 3.746481212138856*^9}},
 CellLabel->
  "In[613]:=",ExpressionUUID->"77cbdc38-18a1-4a7b-a240-714b1b7476a2"],

Cell[BoxData["0.8173894901710712`"], "Output",
 CellChangeTimes->{{3.7464812015501328`*^9, 3.746481216102561*^9}},
 CellLabel->
  "Out[613]=",ExpressionUUID->"04bdd247-5b24-415f-ad8b-7d8d0abde172"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BinCounts", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6",
      ",", "3"}], "}"}], ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.7464943641632547`*^9, 3.7464944007179813`*^9}},
 CellLabel->
  "In[616]:=",ExpressionUUID->"8aee1118-01d7-4a9a-8c7a-1db9ec8979c4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "3", ",", "2", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{{3.746494380772854*^9, 3.746494407467691*^9}},
 CellLabel->
  "Out[616]=",ExpressionUUID->"ce75b92d-af73-4a84-91f7-937d93754073"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normalize", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomReal", "[", "10", "]"}], ",", "8"}], "]"}], "]"}]], "Input",\

 CellChangeTimes->{{3.746495151789837*^9, 3.746495164089953*^9}},
 CellLabel->
  "In[620]:=",ExpressionUUID->"42331531-f9f0-4c17-b459-fc7c447fe654"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.5403396978183679`", ",", "0.2143992128280438`", ",", 
   "0.390944952039835`", ",", "0.3418603379245701`", ",", 
   "0.11137572133387526`", ",", "0.3114096456772879`", ",", 
   "0.5319005494699514`", ",", "0.007799299905045005`"}], "}"}]], "Output",
 CellChangeTimes->{{3.746495157601261*^9, 3.74649516687869*^9}},
 CellLabel->
  "Out[620]=",ExpressionUUID->"c69170b2-bc81-4c19-b171-a3cda497919a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"a", "=", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "2", ",", "1"}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.746533011257433*^9, 3.7465330191593027`*^9}},
 CellLabel->
  "In[621]:=",ExpressionUUID->"4ebd60b5-6ac7-416d-954c-82e936aec784"],

Cell[BoxData[
 RowBox[{
  RowBox[{"b", "=", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "3", ",", "1"}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.746533022098795*^9, 3.746533028216028*^9}},
 CellLabel->
  "In[622]:=",ExpressionUUID->"a8a4aa82-afd5-45ec-8714-345cc9da6f62"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"a", "[", 
     RowBox[{"[", "i", "]"}], "]"}], "*", 
    RowBox[{"b", "[", 
     RowBox[{"[", "i", "]"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7465330025874357`*^9, 3.7465330575301456`*^9}},
 CellLabel->
  "In[623]:=",ExpressionUUID->"31f052b0-ff18-487f-bad2-772510aa4ab8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"9", ",", "9", ",", "6", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.746533058024201*^9},
 CellLabel->
  "Out[623]=",ExpressionUUID->"5fbb2ffa-efba-46f1-bbc1-050afde3131c"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.746480635524126*^9, 
  3.7464806378157997`*^9}},ExpressionUUID->"62327862-8e3f-439d-81e1-\
e5537ce1f2e4"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7464804751328278`*^9, 
  3.746480506680193*^9}},ExpressionUUID->"0dc3b093-91e0-488c-9300-\
b40a5ce2baa7"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7464804096445513`*^9, 
  3.7464804417832947`*^9}},ExpressionUUID->"a6cba8fe-c93a-4f97-a422-\
6d670ad8bc14"],

Cell[TextData[{
 "where,\n\n",
 StyleBox["trials",
  FontFamily->"Courier New"],
 " ",
 StyleBox[" a list of trials, each of which gives the results of drawing a \
die from the bag and rolling it n times. Each trial is a list of the face \
numbers rolled. It has length n. It has the same format as ",
  FontColor->Automatic],
 " the output produced by your ",
 StyleBox["diceSample",
  FontFamily->"Courier New"],
 " function.\n\n",
 StyleBox["maxIterations",
  FontFamily->"Courier New"],
 " is the maximum number of EM iterations the function should run before \
terminating.\n\n",
 StyleBox["accuracy",
  FontFamily->"Courier New"],
 " is the value at which to terminate the EM iterations when the total change \
in all parameters from one iteration to the next is less than this value.  \
The iteration should stop when either termination condition is met. \n\nThe \
number of faces, trials per draw, etc., can all be inferred from the input \
sample so they will not be provided as arguments (see code). \n\n",
 StyleBox["diceEM",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 " counts the number of times each face occurs in each trial, picks the \
initial values for the parameter estimates, and calls ",
 StyleBox["diceEMIterator",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 ". ",
 StyleBox["diceEMIterator",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 " implements the outer loop of the EM algorithm. It calls ",
 StyleBox["updateProbs",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 " on each iteration. \n\nThe return value ",
 StyleBox["diceEM",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 " and ",
 StyleBox["diceEMIterator",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 " is the final estimate of the parameters, in the form specified at the top \
of the code file.\n\n",
 StyleBox["Your",
  FontFamily->"Arial",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 " ",
 StyleBox["updateProbs",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 " code will call your ",
 StyleBox["dicePosteriors",
  FontFamily->"Courier New"],
 " function and the unit tests will call your ",
 StyleBox["diceSample",
  FontFamily->"Courier New"],
 " function, so please be sure that they work. If not, you can request \
correct implementations from the TAs.\n"
}], "Text",
 CellChangeTimes->{{3.585589476497059*^9, 3.585589493266638*^9}, {
   3.585589533952774*^9, 3.585589534857189*^9}, {3.585589857639256*^9, 
   3.585589873358777*^9}, {3.585590015206093*^9, 3.585590129837669*^9}, {
   3.585590161068686*^9, 3.585590286458582*^9}, {3.58559034184394*^9, 
   3.585590378706388*^9}, {3.58559048017951*^9, 3.585590555730523*^9}, {
   3.585590716440814*^9, 3.585590722281188*^9}, {3.5855908759048977`*^9, 
   3.585590897886427*^9}, {3.585679048784273*^9, 3.5856790558956947`*^9}, {
   3.5856790998241453`*^9, 3.585679118095757*^9}, {3.5859154947384567`*^9, 
   3.585915613786189*^9}, {3.585915762617684*^9, 3.5859157819038*^9}, {
   3.585915984151194*^9, 3.585916018910907*^9}, {3.585916058830315*^9, 
   3.585916091078376*^9}, {3.7434431123601627`*^9, 3.743443215595296*^9}, {
   3.744299204347004*^9, 3.744299205423389*^9}, {3.744299502492345*^9, 
   3.744299549420641*^9}, {3.744299610935207*^9, 3.74429976082397*^9}, {
   3.74429988108996*^9, 3.7443000338602324`*^9}, 
   3.746475745328889*^9},ExpressionUUID->"142e1436-1cf3-4d5f-aeda-\
fc32e705bbbe"],

Cell[TextData[{
 "Outlines of the code are provided in the file diceEM.m. Read the comments, \
too. You only have to fill in the key parts of the algorithm and paste in \
your ",
 StyleBox["diceSample",
  FontFamily->"Courier New"],
 " and ",
 StyleBox["dicePosteriors",
  FontFamily->"Courier New"],
 " code.\n\nThe lab package also contains test files for ",
 StyleBox["dicePosteriors",
  FontFamily->"Courier New"],
 ". If your code cannot pass all those tests, please request a correct \
implementation from the TAs."
}], "Text",
 CellChangeTimes->{
  3.58558953196763*^9, 3.585590629538105*^9, 3.585590679144126*^9, 
   3.5859161031424093`*^9, {3.744300038050169*^9, 
   3.744300083699299*^9}},ExpressionUUID->"fea3e592-1307-4eba-aeb2-\
5e8275e3d314"]
}, Open  ]],

Cell[CellGroupData[{

Cell["EM initialization", "Subsection",
 CellChangeTimes->{{3.585678662002997*^9, 
  3.5856786658813334`*^9}},ExpressionUUID->"30f805c6-ae89-40e7-ac3d-\
6aebc3f1d4c8"],

Cell["\<\
To initialize the parameter estimates, do not make all the possibilities \
equally likely. If you do, the algorithm may get stuck and take longer to \
converge or not converge on the right answer at all. However, do not make \
them too far from equally likely, either, to avoid strongly biasing the final \
result by the initial values. Since there are only two die types, I suggest \
initializing their probabilities to 0.45 and 0.55. For the probabilities of \
the n faces of each die, I took a random real between 1/n and 2/n. Then I \
normalized them so they would all add up to one using the call\
\>", "Text",
 CellChangeTimes->{{3.585511769313303*^9, 3.585512058668063*^9}, {
  3.5860222115335293`*^9, 3.586022230581175*^9}, {3.744300144949276*^9, 
  3.744300151453784*^9}, {3.7443001837486773`*^9, 
  3.744300203340618*^9}},ExpressionUUID->"6f821b06-7bbd-4188-80ec-\
9c8467182186"],

Cell[BoxData[
 RowBox[{"Normalize", "[", 
  RowBox[{"listOfNumbers", ",", " ", "Total"}], "]"}]], "Input",
 CellChangeTimes->{{3.5855120634999533`*^9, 
  3.585512083262108*^9}},ExpressionUUID->"de3dfa75-5c50-41f9-bc87-\
748e771202a8"],

Cell["\<\
which divides a list by its total. Or if you\[CloseCurlyQuote]re in a \
do-it-yourself mood,\
\>", "Text",
 CellChangeTimes->{{3.585512087140627*^9, 3.585512110036173*^9}, {
  3.5855121462205763`*^9, 3.585512151564994*^9}, {3.5860222484313393`*^9, 
  3.586022249171916*^9}},ExpressionUUID->"cf9a06fd-3126-4e32-8171-\
ded4041d8334"],

Cell[BoxData[
 RowBox[{"listOfNumbers", " ", "/", " ", 
  RowBox[{"Total", "[", "listOfNumbers", "]"}]}]], "Input",
 CellChangeTimes->{{3.5855121258641243`*^9, 3.5855121361508503`*^9}, {
  3.743506921133327*^9, 
  3.74350692720254*^9}},ExpressionUUID->"99abe068-37e2-4004-b00f-\
1fb5388fefbf"],

Cell["", "Text",ExpressionUUID->"e35d9af8-294e-4873-acd9-ffa490379854"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tips", "Subsection",
 CellChangeTimes->{{3.74350693589951*^9, 
  3.743506937426483*^9}},ExpressionUUID->"3da264fc-1415-40ba-8c81-\
2a4d9986df7f"],

Cell[CellGroupData[{

Cell[TextData[{
 "I strongly recommend implementing this from the inside out. Start with ",
 StyleBox["updateProbs",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 ", which is where you will spend most of your time. We have a whole big file \
of tests for it. Once you pass those, the rest should be easy."
}], "ItemNumbered",
 CellChangeTimes->{{3.7435069734352627`*^9, 3.743507157821698*^9}, 
   3.7435072773039083`*^9, {3.743507325256373*^9, 3.743507326942906*^9}, {
   3.7435077715108833`*^9, 3.7435077744130993`*^9}, {3.744300223414028*^9, 
   3.744300325573019*^9}},ExpressionUUID->"0abf57cc-22bf-4909-80fe-\
dff08d08d430"],

Cell[TextData[{
 "Functions that I used in my implementation include ",
 StyleBox["Normalize",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 ", ",
 StyleBox["Total",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 ",  ",
 StyleBox["Max",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 ",  ",
 StyleBox["Abs",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 ", ",
 StyleBox["BinCounts",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 ", ",
 StyleBox["Range",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 ",  ",
 StyleBox["RandomReal",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 ",  ",
 StyleBox["Do",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 ", and ",
 StyleBox["Break",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 ". This is not a complete list! Just the ones I thought you might need to \
look up. "
}], "ItemNumbered",
 CellChangeTimes->{{3.7435069734352627`*^9, 3.743507157821698*^9}, 
   3.7435072773039083`*^9, {3.743507325256373*^9, 3.743507326942906*^9}, {
   3.7435077715108833`*^9, 3.7435077744130993`*^9}, {3.744300223414028*^9, 
   3.744300224333448*^9}, {3.744301235952585*^9, 
   3.7443012359587727`*^9}},ExpressionUUID->"729adb95-835e-44fd-a449-\
e078755c538c"],

Cell["\<\
If you put a semicolon after the last expression of a function, it will \
return NULL. This is almost never the desired behavior.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.7435069734352627`*^9, 3.743507157821698*^9}, 
   3.7435072773039083`*^9, {3.743507325256373*^9, 3.743507326942906*^9}, {
   3.7435077715108833`*^9, 3.7435077744130993`*^9}, {3.744300223414028*^9, 
   3.744300224333448*^9}, {3.744301236632635*^9, 
   3.744301260952876*^9}},ExpressionUUID->"03b9b48b-0bc2-4405-b0ef-\
36ffbbbea620"],

Cell[TextData[{
 "The way that the binned intervals are defined in ",
 StyleBox["BinCounts",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 " is tricky and somewhat non-intuitive. Read the docs on it. In particular, \
note that (x1, x2] refers to the numbers strictly larger than x1 and less \
than or equal to x2. So the number 1 is in the interval (0, 1] but not in the \
interval (1, 2]. Also note that when you specify the intervals explicitly \
using a list of boundary points, you must enclose that list in an extra set \
of curly braces, per documentation."
}], "ItemNumbered",
 CellChangeTimes->{{3.7435069734352627`*^9, 3.743507253768297*^9}, {
  3.743507329863298*^9, 3.74350732986425*^9}, {3.743509804332529*^9, 
  3.743509839299418*^9}, {3.7443003468876333`*^9, 
  3.7443003476790113`*^9}},ExpressionUUID->"99f083e6-ac08-4957-92bd-\
bdb1ad0b4d4b"],

Cell[TextData[{
 "Despite my overall preference for vectorized and functional coding when \
appropriate, I did use one ",
 StyleBox["Do",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 " loop and a a lot of variable setting in the outer loop my code for the \
diceEM function.  "
}], "ItemNumbered",
 CellChangeTimes->{{3.7435069734352627`*^9, 3.743507253768297*^9}, {
  3.743507330302987*^9, 3.743507663091958*^9}, {3.743507808486227*^9, 
  3.743507828198303*^9}, {3.743508742396332*^9, 3.7435087452747583`*^9}, {
  3.7435087798970947`*^9, 
  3.743508810737486*^9}},ExpressionUUID->"571dedea-8807-4963-9bf9-\
fc1389c18d29"],

Cell[CellGroupData[{

Cell[TextData[{
 "The outer loop can't easily be vectorized because the calculations at each \
step depend on the results from the previous step. ",
 StyleBox["Do",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 " is convenient because there is a fixed maximum number of iterations and we \
stop before reaching that number if the parameter values stop changing.  I"
}], "SubitemNumbered",
 CellChangeTimes->{{3.7435069734352627`*^9, 3.743507253768297*^9}, {
  3.743507330302987*^9, 3.743507663091958*^9}, {3.743507808486227*^9, 
  3.743507828198303*^9}, {3.743508742396332*^9, 3.7435087452747583`*^9}, {
  3.7435087798970947`*^9, 
  3.743508850450569*^9}},ExpressionUUID->"8dbea6a1-b9b3-45aa-82d9-\
74e1635a501d"],

Cell[TextData[{
 "It is possible to implement this outer loop recursively, but you have to \
change the builtin variable ",
 StyleBox["$RecursionLimit",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 "."
}], "SubitemNumbered",
 CellChangeTimes->{{3.7435069734352627`*^9, 3.743507253768297*^9}, {
  3.743507330302987*^9, 3.743507663091958*^9}, {3.743507808486227*^9, 
  3.743507828198303*^9}, {3.743508742396332*^9, 3.7435087452747583`*^9}, {
  3.7435087798970947`*^9, 3.743508889002427*^9}, {3.743508923612361*^9, 
  3.743508945444564*^9}},ExpressionUUID->"b680709a-c4f0-49de-bebf-\
0307bc821234"]
}, Open  ]],

Cell[TextData[{
 StyleBox["updateProbs",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Regular",
  FontColor->RGBColor[0., 0., 0.]],
 " can be completely vectorized and does not require any explicit loops."
}], "ItemNumbered",
 CellChangeTimes->{{3.7435069734352627`*^9, 3.743507253768297*^9}, {
  3.743507330302987*^9, 3.743507663091958*^9}, {3.743507808486227*^9, 
  3.743507828198303*^9}, {3.743508742396332*^9, 3.7435087452747583`*^9}, {
  3.7435087798970947`*^9, 3.743508889002427*^9}, {3.743508923612361*^9, 
  3.743508976387486*^9}, {3.744302611932085*^9, 
  3.744302611932783*^9}},ExpressionUUID->"728a55a8-7900-43ec-9a8d-\
51ebbdad507e"],

Cell["\<\
The test files only print return values. To see the results of Print \
statements as well as warnings and errors, go Window->Messages.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.7435069734352627`*^9, 3.743507253768297*^9}, {
  3.743507330302987*^9, 3.743507663091958*^9}, {3.743507808486227*^9, 
  3.743507828198303*^9}, {3.743508742396332*^9, 3.7435087452747583`*^9}, {
  3.7435087798970947`*^9, 3.743508889002427*^9}, {3.743508923612361*^9, 
  3.743508976387486*^9}, {3.7443026124726458`*^9, 
  3.744302671417348*^9}},ExpressionUUID->"69e63bb8-c8db-41c5-b1b7-\
a938db3818fc"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing", "Section",
 CellChangeTimes->{{3.585512173665118*^9, 
  3.585512174397122*^9}},ExpressionUUID->"b6272032-f273-4ca8-bcda-\
1620f7c4dc0b"],

Cell["Three test files are included.", "Text",
 CellChangeTimes->{{3.585512177132576*^9, 3.58551224205259*^9}, {
   3.585512305828191*^9, 3.585512446845121*^9}, {3.58559091043968*^9, 
   3.5855909144794207`*^9}, 3.58559094837527*^9, 3.585916140247183*^9, {
   3.5859161880218983`*^9, 3.585916189733902*^9}, {3.744300457937429*^9, 
   3.744300477704933*^9}},ExpressionUUID->"426bc1f5-3676-4dc5-b99a-\
583b08654b4d"],

Cell[CellGroupData[{

Cell["\<\
diceSampleAndPosteriorTest.nb. Start here. If your old code does not pass \
these tests, request that a TA give you a correct implementation.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.585512177132576*^9, 3.58551224205259*^9}, {
   3.585512305828191*^9, 3.585512446845121*^9}, {3.58559091043968*^9, 
   3.5855909144794207`*^9}, 3.58559094837527*^9, 3.585916140247183*^9, {
   3.5859161880218983`*^9, 3.585916189733902*^9}, {3.744300457937429*^9, 
   3.744300466551952*^9}, {3.744300499699855*^9, 3.744300501794973*^9}, {
   3.7443005730569763`*^9, 3.744300616730089*^9}, {3.744300658370419*^9, 
   3.744300666809496*^9}},ExpressionUUID->"c2094772-d6aa-410e-bbc3-\
153187a9c5b2"],

Cell["\<\
diceEMUpdateProbsTest.nb Focus on this next. This is the heart of the \
algorithm. It relies on dicePosterior. These tests do not include any random \
factors, and they should run fast. \
\>", "ItemNumbered",
 CellChangeTimes->{{3.585512177132576*^9, 3.58551224205259*^9}, {
   3.585512305828191*^9, 3.585512446845121*^9}, {3.58559091043968*^9, 
   3.5855909144794207`*^9}, 3.58559094837527*^9, 3.585916140247183*^9, {
   3.5859161880218983`*^9, 3.585916189733902*^9}, {3.744300457937429*^9, 
   3.744300466551952*^9}, {3.744300499699855*^9, 3.744300526313891*^9}, {
   3.744300620824769*^9, 3.7443006932018967`*^9}, {3.744300732234251*^9, 
   3.7443007512808027`*^9}, {3.744300840755693*^9, 3.7443008871027412`*^9}, {
   3.744301710983739*^9, 3.744301725206224*^9}, {3.74430192622573*^9, 
   3.744301927728417*^9}, {3.744302011095335*^9, 
   3.744302011095652*^9}},ExpressionUUID->"3ac23931-069c-4559-ada7-\
513956eae5fb"],

Cell["\<\
If any individual test takes more than 20 seconds you almost certainly have \
incorrect code. On my laptop, the entire test file completes in 10 seconds.\
\>", "SubitemNumbered",
 CellChangeTimes->{{3.585512177132576*^9, 3.58551224205259*^9}, {
   3.585512305828191*^9, 3.585512446845121*^9}, {3.58559091043968*^9, 
   3.5855909144794207`*^9}, 3.58559094837527*^9, 3.585916140247183*^9, {
   3.5859161880218983`*^9, 3.585916189733902*^9}, {3.744300457937429*^9, 
   3.744300466551952*^9}, {3.744300499699855*^9, 3.744300526313891*^9}, {
   3.744300620824769*^9, 3.7443006932018967`*^9}, {3.744300732234251*^9, 
   3.7443007512808027`*^9}, {3.744300840755693*^9, 3.7443008871027412`*^9}, {
   3.744301710983739*^9, 3.744301725206224*^9}, {3.74430192622573*^9, 
   3.744301927728417*^9}, {3.74430201886602*^9, 
   3.7443020188668137`*^9}},ExpressionUUID->"9c75ef4d-e04d-43d8-8831-\
f8ebb1cc80cc"],

Cell["\<\
diceEMTest.nb. This test file focuses on generating random samples from \
diceSample and showing that diceEM can recover the parameters that were used \
to generate the sample. Do this last. The last couple of tests may take a \
minute or to complete. \
\>", "ItemNumbered",
 CellChangeTimes->{{3.585512177132576*^9, 3.58551224205259*^9}, {
   3.585512305828191*^9, 3.585512446845121*^9}, {3.58559091043968*^9, 
   3.5855909144794207`*^9}, 3.58559094837527*^9, 3.585916140247183*^9, {
   3.5859161880218983`*^9, 3.585916189733902*^9}, {3.744300457937429*^9, 
   3.744300466551952*^9}, {3.744300499699855*^9, 3.744300522707354*^9}, 
   3.744300566460538*^9, {3.74430069837864*^9, 3.744300722490767*^9}, {
   3.744300760548773*^9, 3.744300836941032*^9}, {3.744301881867896*^9, 
   3.744301918121387*^9}, {3.7443020968135033`*^9, 
   3.744302096814116*^9}},ExpressionUUID->"553b07f0-7380-4a40-899d-\
88a74316e9a5"],

Cell[CellGroupData[{

Cell["\<\
On my laptop the last test, which is the longest, takes just under 35 sec. If \
you're not within a factor 5 of that you likely have a bug in your code.\
\>", "SubitemNumbered",
 CellChangeTimes->{{3.585512177132576*^9, 3.58551224205259*^9}, {
   3.585512305828191*^9, 3.585512446845121*^9}, {3.58559091043968*^9, 
   3.5855909144794207`*^9}, 3.58559094837527*^9, 3.585916140247183*^9, {
   3.5859161880218983`*^9, 3.585916189733902*^9}, {3.744300457937429*^9, 
   3.744300466551952*^9}, {3.744300499699855*^9, 3.744300522707354*^9}, 
   3.744300566460538*^9, {3.74430069837864*^9, 3.744300722490767*^9}, {
   3.744300760548773*^9, 3.744300836941032*^9}, {3.744301881867896*^9, 
   3.744301918121387*^9}, {3.7443021188211527`*^9, 
   3.7443021188218317`*^9}},ExpressionUUID->"2227b1ca-b885-4ef0-876d-\
7edff2206bfc"],

Cell["\<\
If you run a test and get the expected output but you don\[CloseCurlyQuote]t \
get the expected warning message, that is ok. Just click on the button that \
replaces the expected warning message with the actual one and rerun.\
\>", "SubitemNumbered",
 CellChangeTimes->{{3.585512177132576*^9, 3.58551224205259*^9}, {
   3.585512305828191*^9, 3.585512446845121*^9}, {3.58559091043968*^9, 
   3.5855909144794207`*^9}, 3.58559094837527*^9, 3.585916140247183*^9, {
   3.5859161880218983`*^9, 3.585916189733902*^9}, {3.744300457937429*^9, 
   3.744300466551952*^9}, {3.744300499699855*^9, 3.744300522707354*^9}, 
   3.744300566460538*^9, {3.74430069837864*^9, 3.744300722490767*^9}, {
   3.744300760548773*^9, 3.744300836941032*^9}, {3.744301881867896*^9, 
   3.744301918121387*^9}, {3.7443021195478573`*^9, 
   3.744302130659582*^9}},ExpressionUUID->"beae8688-229f-4fcd-bb4c-\
51e6c06fed7a"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Experiments and questions", "Section",
 CellChangeTimes->{{3.5855125680373287`*^9, 
  3.5855125711403923`*^9}},ExpressionUUID->"7af0a743-7176-4022-a8a6-\
2d8748a607c0"],

Cell[CellGroupData[{

Cell["Number of iterations needed for convergence", "Subsection",
 CellChangeTimes->{{3.585514019327592*^9, 
  3.585514037668663*^9}},ExpressionUUID->"931dbee6-5489-4142-a2dd-\
4426c1d1ec5d"],

Cell["\<\
Instrument your code to print out the iteration number on each iteration of \
the outer loop -- that is each call to updateProbs.\
\>", "Text",
 CellChangeTimes->{{3.744302811546927*^9, 
  3.744302837579392*^9}},ExpressionUUID->"a730943f-7d25-4f5d-b17a-\
a52b04a61bfa"],

Cell["\<\
In the diceEMTest.nb notebook, one of the final three tests is \
\>", "ItemNumbered",
 CellChangeTimes->{{3.5855127044312973`*^9, 3.58551273417302*^9}, {
   3.58551295062579*^9, 3.585513020764667*^9}, {3.585513134869034*^9, 
   3.58551319216504*^9}, {3.585513451959071*^9, 3.585513452132319*^9}, {
   3.585513710184174*^9, 3.585513711052243*^9}, {3.58551379727724*^9, 
   3.5855138245643673`*^9}, {3.585513892557687*^9, 3.5855139684926777`*^9}, {
   3.585514048596245*^9, 3.585514048605052*^9}, {3.585514121053053*^9, 
   3.585514145228565*^9}, 3.743443362388232*^9, {3.744302204422217*^9, 
   3.7443022149238577`*^9}, {3.744302747150888*^9, 
   3.744302795235051*^9}},ExpressionUUID->"05b9f4d1-78a4-45d7-a84c-\
a12e25347e94"],

Cell[BoxData[
 RowBox[{"diceEM", "[", 
  RowBox[{
   RowBox[{"diceSample", "[", 
    RowBox[{"0.4", ",", "0.6", ",", 
     RowBox[{"{", 
      RowBox[{"0.3", ",", "0.2", ",", "0.2", ",", "0.3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0.2", ",", "0.2", ",", "0.6"}], "}"}], ",", "4000", 
     ",", "30"}], "]"}], ",", "100", ",", 
   RowBox[{"10", "^", 
    RowBox[{"-", "4"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.744302971719192*^9, 3.744302999421558*^9}, {
  3.744303082346854*^9, 
  3.7443030826144247`*^9}},ExpressionUUID->"abeba0f5-8079-4da6-9242-\
cfe944d7563a"],

Cell[CellGroupData[{

Cell["\<\
How many iterations does it take to converge to within the required accuracy \
of 10^-4? How does that change if you tighten the convergence criterion to \
10^-6? How about 10^-8. Please make a comment on the general pattern you \
observe.\
\>", "SubitemNumbered",
 CellChangeTimes->{{3.5855127044312973`*^9, 3.58551273417302*^9}, {
   3.58551295062579*^9, 3.585513020764667*^9}, {3.585513134869034*^9, 
   3.58551319216504*^9}, {3.585513451959071*^9, 3.585513452132319*^9}, {
   3.585513710184174*^9, 3.585513711052243*^9}, {3.58551379727724*^9, 
   3.5855138245643673`*^9}, {3.585513892557687*^9, 3.5855139684926777`*^9}, {
   3.585514048596245*^9, 3.585514048605052*^9}, {3.585514121053053*^9, 
   3.585514145228565*^9}, 3.743443362388232*^9, {3.744302204422217*^9, 
   3.7443022149238577`*^9}, 3.7443029647885857`*^9, {3.744303190112281*^9, 
   3.744303208618209*^9}},ExpressionUUID->"f0cdfd28-4529-4c85-b56b-\
4cb0a91a96b0"],

Cell["\<\
How much effect does tightening the accuracy requirement by 2 or 4 orders of \
magnitude have on how well the algorithm identifies the correct parameters?\
\>", "SubitemNumbered",
 CellChangeTimes->{{3.5855127044312973`*^9, 3.58551273417302*^9}, {
   3.58551295062579*^9, 3.585513020764667*^9}, {3.585513134869034*^9, 
   3.58551319216504*^9}, {3.585513451959071*^9, 3.585513452132319*^9}, {
   3.585513710184174*^9, 3.585513711052243*^9}, {3.58551379727724*^9, 
   3.5855138245643673`*^9}, {3.585513892557687*^9, 3.5855139684926777`*^9}, {
   3.585514048596245*^9, 3.585514048605052*^9}, {3.585514121053053*^9, 
   3.585514145228565*^9}, 3.743443362388232*^9, {3.744302204422217*^9, 
   3.7443022149238577`*^9}, 3.7443029647885857`*^9, {3.744303190112281*^9, 
   3.7443032871449413`*^9}, {3.7443033902051697`*^9, 
   3.7443033902058268`*^9}},ExpressionUUID->"3e45dfc9-f40c-4ddb-bae2-\
4d43f66e7d43"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Now let\[CloseCurlyQuote]s change the parameters of the sample generated as \
shown below. \
\>", "ItemNumbered",
 CellChangeTimes->{{3.5855127044312973`*^9, 3.58551273417302*^9}, {
   3.58551295062579*^9, 3.585513020764667*^9}, {3.585513134869034*^9, 
   3.58551319216504*^9}, {3.585513451959071*^9, 3.585513452132319*^9}, {
   3.585513710184174*^9, 3.585513711052243*^9}, {3.58551379727724*^9, 
   3.5855138245643673`*^9}, {3.585513892557687*^9, 3.5855139684926777`*^9}, {
   3.585514048596245*^9, 3.585514048605052*^9}, {3.585514121053053*^9, 
   3.585514145228565*^9}, 3.743443362388232*^9, {3.744302204422217*^9, 
   3.7443022149238577`*^9}, 3.7443029647885857`*^9, {3.744303190112281*^9, 
   3.7443032871449413`*^9}, {3.744303391883515*^9, 
   3.744303432090699*^9}},ExpressionUUID->"eeb2d3f7-3dbf-4e88-8293-\
c529866aeb81"],

Cell["\<\
How does this affect the number of iterations required to make the accuracy \
goal? Why do you think that is?\
\>", "SubitemNumbered",
 CellChangeTimes->{{3.5855127044312973`*^9, 3.58551273417302*^9}, {
   3.58551295062579*^9, 3.585513020764667*^9}, {3.585513134869034*^9, 
   3.58551319216504*^9}, {3.585513451959071*^9, 3.585513452132319*^9}, {
   3.585513710184174*^9, 3.585513711052243*^9}, {3.58551379727724*^9, 
   3.5855138245643673`*^9}, {3.585513892557687*^9, 3.5855139684926777`*^9}, {
   3.585514048596245*^9, 3.585514048605052*^9}, {3.585514121053053*^9, 
   3.585514145228565*^9}, 3.743443362388232*^9, {3.744302204422217*^9, 
   3.7443022149238577`*^9}, 3.7443029647885857`*^9, {3.744303190112281*^9, 
   3.7443032871449413`*^9}, {3.744303391883515*^9, 
   3.744303471355303*^9}},ExpressionUUID->"ad2dfcfe-17e6-4c8a-b3d6-\
7e3374f7b97a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"myRound", "[", 
  RowBox[{
   RowBox[{"diceEM", "[", 
    RowBox[{
     RowBox[{"diceSample", "[", 
      RowBox[{"0.4", ",", "0.6", ",", 
       RowBox[{"{", 
        RowBox[{"0.3", ",", "0.2", ",", "0.3", ",", "0.2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.1", ",", "0.2", ",", "0.2", ",", "0.5"}], "}"}], ",", 
       "4000", ",", "30"}], "]"}], ",", "100", ",", 
     RowBox[{"10", "^", 
      RowBox[{"-", "4"}]}]}], "]"}], ",", "\[IndentingNewLine]", "4"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.744303355218033*^9, 3.744303355594681*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"9f054d80-b209-4f3a-9f2b-46a35bc67161"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sample size", "Subsection",
 CellChangeTimes->{{3.585515169813821*^9, 
  3.585515171525044*^9}},ExpressionUUID->"9442e662-501a-4c21-a916-\
1c44195c28a6"],

Cell[BoxData[
 RowBox[{"myRound", "[", 
  RowBox[{
   RowBox[{"diceEM", "[", 
    RowBox[{
     RowBox[{"diceSample", "[", 
      RowBox[{"0.4", ",", "0.6", ",", 
       RowBox[{"{", 
        RowBox[{"0.3", ",", "0.3", ",", "0.2", ",", "0.2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.2", ",", "0.2", ",", "0.2", ",", "0.4"}], "}"}], ",", 
       "6000", ",", "30"}], "]"}], ",", "100", ",", 
     RowBox[{"10", "^", 
      RowBox[{"-", "4"}]}]}], "]"}], ",", "\[IndentingNewLine]", "3"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.744303595069234*^9, 3.744303602143203*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"453efa9e-371c-48c1-bbeb-144a22ce4793"],

Cell["Consider the following experiment.", "ItemNumbered",
 CellChangeTimes->{{3.585515201208303*^9, 3.585515208932482*^9}, {
  3.5855152682445917`*^9, 3.5855152889652777`*^9}, {3.5855155648870287`*^9, 
  3.5855156335836363`*^9}, {3.7443037776651087`*^9, 
  3.7443038118722754`*^9}},ExpressionUUID->"efec62ff-11d5-40db-a52d-\
a13ce741cd0a"],

Cell[BoxData[
 RowBox[{"myRound", "[", 
  RowBox[{
   RowBox[{"diceEM", "[", 
    RowBox[{
     RowBox[{"diceSample", "[", 
      RowBox[{"0.4", ",", "0.6", ",", 
       RowBox[{"{", 
        RowBox[{"0.3", ",", "0.3", ",", "0.2", ",", "0.2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.2", ",", "0.2", ",", "0.2", ",", "0.4"}], "}"}], ",", 
       "6000", ",", "30"}], "]"}], ",", "100", ",", 
     RowBox[{"10", "^", 
      RowBox[{"-", "4"}]}]}], "]"}], ",", "\[IndentingNewLine]", "3"}], 
  "]"}]], "Input",ExpressionUUID->"cccbd472-c5f7-42bb-bd36-c740dbe69dc3"],

Cell[CellGroupData[{

Cell["How many die rolls are in this sample? ", "SubitemNumbered",
 CellChangeTimes->{{3.585515201208303*^9, 3.585515208932482*^9}, {
  3.5855152682445917`*^9, 3.5855152889652777`*^9}, {3.5855155648870287`*^9, 
  3.5855156335836363`*^9}, {3.7443037776651087`*^9, 3.7443037903108263`*^9}, {
  3.74430383519689*^9, 
  3.744303835197358*^9}},ExpressionUUID->"56e49262-6a7b-4d5a-999b-\
f1f3a10d41d9"],

Cell["\<\
Try reducing the number of draws/trials while keeping the number of rolls \
constant. How many draws do you need with 30 rolls each to get the right \
answer consistently, to within two decimal places? \
\>", "SubitemNumbered",
 CellChangeTimes->{{3.585515201208303*^9, 3.585515208932482*^9}, {
  3.5855152682445917`*^9, 3.5855152889652777`*^9}, {3.5855155648870287`*^9, 
  3.5855156335836363`*^9}, {3.7443037776651087`*^9, 3.7443037903108263`*^9}, {
  3.74430384098381*^9, 3.74430387219201*^9}, {3.744303930339554*^9, 
  3.744303937040553*^9}, {3.744304013500844*^9, 
  3.744304040777553*^9}},ExpressionUUID->"4352cc05-5b45-4b96-99c6-\
de2eb395a526"],

Cell["\<\
If you don\[CloseCurlyQuote]t have quite enough draws/trials, which \
parameters tend to be off?\
\>", "SubitemNumbered",
 CellChangeTimes->{{3.585515201208303*^9, 3.585515208932482*^9}, {
  3.5855152682445917`*^9, 3.5855152889652777`*^9}, {3.5855155648870287`*^9, 
  3.5855156335836363`*^9}, {3.7443037776651087`*^9, 3.7443037903108263`*^9}, {
  3.74430384098381*^9, 3.74430387219201*^9}, {3.744303930339554*^9, 
  3.744303937040553*^9}, {3.744304013500844*^9, 3.744304051234713*^9}, {
  3.7443045035070457`*^9, 
  3.744304503508272*^9}},ExpressionUUID->"e5310eb3-6a91-49e0-ae7b-\
4402116f820d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Now try changing the number of rolls per trial to 50.", "ItemNumbered",
 CellChangeTimes->{{3.585515201208303*^9, 3.585515208932482*^9}, {
  3.5855152682445917`*^9, 3.5855152889652777`*^9}, {3.5855155648870287`*^9, 
  3.5855156335836363`*^9}, {3.7443037776651087`*^9, 3.7443037903108263`*^9}, {
  3.74430384098381*^9, 3.74430387219201*^9}, {3.744303930339554*^9, 
  3.744303937040553*^9}, {3.744304013500844*^9, 3.744304051234713*^9}, {
  3.744304505353652*^9, 
  3.744304536077478*^9}},ExpressionUUID->"64d0495c-b30c-434a-a81c-\
b88536a963dc"],

Cell[CellGroupData[{

Cell["\<\
How many trials do you need to consistently get the right  answer \
consistently, to within two decimal places? \
\>", "SubitemNumbered",
 CellChangeTimes->{{3.585515201208303*^9, 3.585515208932482*^9}, {
  3.5855152682445917`*^9, 3.5855152889652777`*^9}, {3.5855155648870287`*^9, 
  3.5855156335836363`*^9}, {3.7443037776651087`*^9, 3.7443037903108263`*^9}, {
  3.74430384098381*^9, 3.74430387219201*^9}, {3.744303930339554*^9, 
  3.744303937040553*^9}, {3.744304013500844*^9, 3.744304051234713*^9}, {
  3.744304505353652*^9, 
  3.744304571376279*^9}},ExpressionUUID->"a872eee7-68f5-45d0-aa04-\
e5c6aa922931"],

Cell["\<\
Is the total number of rolls higher or lower than in question 1?\
\>", "SubitemNumbered",
 CellChangeTimes->{{3.585515201208303*^9, 3.585515208932482*^9}, {
  3.5855152682445917`*^9, 3.5855152889652777`*^9}, {3.5855155648870287`*^9, 
  3.5855156335836363`*^9}, {3.7443037776651087`*^9, 3.7443037903108263`*^9}, {
  3.74430384098381*^9, 3.74430387219201*^9}, {3.744303930339554*^9, 
  3.744303937040553*^9}, {3.744304013500844*^9, 3.744304051234713*^9}, {
  3.744304505353652*^9, 
  3.744304592300466*^9}},ExpressionUUID->"fc2acb97-e8c9-47ad-a108-\
b30ff128faf6"],

Cell["\<\
When you don\[CloseCurlyQuote]t have quite enough rolls, which parameters \
tend to be off?\
\>", "SubitemNumbered",
 CellChangeTimes->{{3.585515201208303*^9, 3.585515208932482*^9}, {
  3.5855152682445917`*^9, 3.5855152889652777`*^9}, {3.5855155648870287`*^9, 
  3.5855156335836363`*^9}, {3.7443037776651087`*^9, 3.7443037903108263`*^9}, {
  3.74430384098381*^9, 3.74430387219201*^9}, {3.744303930339554*^9, 
  3.744303937040553*^9}, {3.744304013500844*^9, 3.744304051234713*^9}, {
  3.744304505353652*^9, 
  3.744304616333414*^9}},ExpressionUUID->"c96f9135-4ceb-4744-b341-\
0efa47f46d2e"],

Cell["\<\
If this is different from in question 1, please try to explain why, on an \
intuitive level.\
\>", "SubitemNumbered",
 CellChangeTimes->{{3.585515201208303*^9, 3.585515208932482*^9}, {
  3.5855152682445917`*^9, 3.5855152889652777`*^9}, {3.5855155648870287`*^9, 
  3.5855156335836363`*^9}, {3.7443037776651087`*^9, 3.7443037903108263`*^9}, {
  3.74430384098381*^9, 3.74430387219201*^9}, {3.744303930339554*^9, 
  3.744303937040553*^9}, {3.744304013500844*^9, 3.744304051234713*^9}, {
  3.744304505353652*^9, 
  3.744304643122361*^9}},ExpressionUUID->"e8637324-aadd-43c8-a908-\
f2989b3586d8"]
}, Open  ]],

Cell["\<\
Try to reduce the number of rolls by changing the number of trials and the \
number of rolls per trial. How low can you go? Don\[CloseCurlyQuote]t go \
crazy on this, you don\[CloseCurlyQuote]t need an exact answer (although you \
can write code to optimize or use the builtin functions if you want). \
\>", "ItemNumbered",
 CellChangeTimes->{{3.585515201208303*^9, 3.585515208932482*^9}, {
  3.5855152682445917`*^9, 3.5855152889652777`*^9}, {3.5855155648870287`*^9, 
  3.5855156335836363`*^9}, {3.7443037776651087`*^9, 3.7443037903108263`*^9}, {
  3.74430384098381*^9, 3.74430387219201*^9}, {3.744303930339554*^9, 
  3.744303937040553*^9}, {3.744304013500844*^9, 3.744304051234713*^9}, {
  3.744304505353652*^9, 3.7443045902493057`*^9}, {3.744304648316278*^9, 
  3.744304771291931*^9}},ExpressionUUID->"45977650-49b4-4ae8-9108-\
cb0c405cdb12"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Instructions and grading", "Section",
 CellChangeTimes->{{3.585589085899582*^9, 3.585589086700222*^9}, {
  3.586022771579047*^9, 
  3.586022775165971*^9}},ExpressionUUID->"14f43c79-0d7a-4c83-8f07-\
adfe5f5bfba8"],

Cell["\<\
Please turn in your .m file containing the code and sufficient documentation \
to read and understand it.

The rubric for this is:\
\>", "Text",
 CellChangeTimes->{{3.58499210831761*^9, 3.584992269479895*^9}, {
  3.584992305927824*^9, 3.584992605885792*^9}, {3.5849926396934137`*^9, 
  3.584992779654065*^9}, {3.585059307737156*^9, 3.585059353317692*^9}, {
  3.585059567260913*^9, 3.585059759166882*^9}, {3.5850598028309526`*^9, 
  3.585059837293536*^9}, {3.585069359494947*^9, 3.58506940083663*^9}, {
  3.585771078973572*^9, 3.5857710867632713`*^9}, {3.586022994463966*^9, 
  3.5860230450382843`*^9}, {3.586023120653462*^9, 3.586023232692699*^9}, {
  3.619949746520157*^9, 3.619949754122929*^9}, {3.743444275258142*^9, 
  3.743444275997587*^9}, {3.7434443602232847`*^9, 
  3.7434443610628567`*^9}},ExpressionUUID->"0a85f32c-fc6e-4a0a-98be-\
ecfd23329594"],

Cell[CellGroupData[{

Cell["\<\
1 point for turning in code that takes input of the right form and produces \
output of the right form. \
\>", "Item",
 CellChangeTimes->{{3.743444368665016*^9, 3.743444376511115*^9}, {
   3.743444426734659*^9, 3.743444426734989*^9}, 
   3.743444467314212*^9},ExpressionUUID->"cda38311-1f57-44dc-aa01-\
bd7805abca8d"],

Cell[TextData[{
 " 2 points for turning in code containing a correct implementation of \
updateProbs, which carries out one round of EM by calling ",
 StyleBox["dicePosteriors ",
  FontFamily->"Courier New"],
 "and using the results to estimate new probabilities for all the parameters. \
It must pass all tests for updateProbs."
}], "Item",
 CellChangeTimes->{{3.743444368665016*^9, 3.743444376511115*^9}, {
  3.743444433871851*^9, 3.743444447055831*^9}, {3.744304949800404*^9, 
  3.744304981102645*^9}},ExpressionUUID->"790c7530-5b45-48bf-b3fb-\
389d9d7cb176"],

Cell["\<\
1 points for turning in code that passes all the tests distributed and is  \
fully correct. Just because your code passes all the provided unit tests does \
not guarantee that it is correct -- you need to think about what\
\[CloseCurlyQuote]s right.\
\>", "Item",
 CellChangeTimes->{{3.743444368665016*^9, 3.743444376511115*^9}, {
  3.743444433871851*^9, 3.7434444556005077`*^9}, {3.743444490454533*^9, 
  3.743444490454764*^9}},ExpressionUUID->"495b1f9f-f96b-4898-9d92-\
239789c24ace"],

Cell["\<\
1 points for style (things such as capitalization and full, descriptive \
names) and legibility, including indentation, line breaks, and comments. You \
must satisfy A-C to get these points.\
\>", "Item",
 CellChangeTimes->{{3.743444368665016*^9, 3.743444376511115*^9}, {
   3.743444433871851*^9, 3.7434444556005077`*^9}, 3.743444490976595*^9, {
   3.743444576202523*^9, 
   3.7434445789431543`*^9}},ExpressionUUID->"9b099dfc-5f9b-47ba-be83-\
5980e4c36f7e"],

Cell["1 point for all the questions in this notebook.", "Item",
 CellChangeTimes->{{3.743444368665016*^9, 3.743444376511115*^9}, {
   3.743444433871851*^9, 3.7434444556005077`*^9}, 3.743444490976595*^9, {
   3.743444576202523*^9, 
   3.743444590784753*^9}},ExpressionUUID->"37707684-05ed-4ba5-865a-\
2a2ca480054f"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{991, 1070},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 898, 24, 52, "Input",ExpressionUUID->"c5272d7f-f0ea-4ef5-acf6-b44e90c179c6"],
Cell[CellGroupData[{
Cell[1502, 50, 322, 8, 24, "Print",ExpressionUUID->"432d3b74-fdef-4ff1-a2a3-5e94b745bd1e"],
Cell[1827, 60, 369, 10, 24, "Print",ExpressionUUID->"73be76b3-9e77-4ad4-9ae2-7a91b99a8378"]
}, Open  ]],
Cell[2211, 73, 375, 9, 34, "Output",ExpressionUUID->"4ba8706c-2dae-46c8-aed8-75f6ae90fc46"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2623, 87, 165, 3, 98, "Title",ExpressionUUID->"8e37900a-06a9-4123-915e-f87a3654f422"],
Cell[2791, 92, 383, 8, 58, "Text",ExpressionUUID->"505d0b61-07b1-4cfc-9536-78d1d170cc64"],
Cell[CellGroupData[{
Cell[3199, 104, 152, 3, 67, "Section",ExpressionUUID->"24712caf-4e80-4c5f-9b32-04c63e5ac3c9"],
Cell[3354, 109, 1967, 35, 173, "Text",ExpressionUUID->"8c71f104-f42d-4567-b5f8-3d1cad62fd44"],
Cell[CellGroupData[{
Cell[5346, 148, 183, 2, 54, "Subsection",ExpressionUUID->"7a1330da-0714-4548-9369-8dc426627bbc"],
Cell[5532, 152, 399, 11, 35, "Text",ExpressionUUID->"e256fb37-fdbb-4d50-8643-9a9827194716"],
Cell[5934, 165, 357, 6, 30, "Input",ExpressionUUID->"72d9a4d1-7dbd-4150-b1dc-ba767ccf2d07"],
Cell[6294, 173, 1919, 49, 136, "Input",ExpressionUUID->"cc077a52-25c7-458f-9fe2-64b7fa409fb3"],
Cell[8216, 224, 2899, 75, 262, "Input",ExpressionUUID->"f4b47f5d-79d8-4933-8d77-07f3612ff1aa"],
Cell[11118, 301, 645, 17, 30, "Input",ExpressionUUID->"6e0e4f79-7cf5-4fbb-9470-9b974cf2f5ce"],
Cell[CellGroupData[{
Cell[11788, 322, 932, 24, 115, "Input",ExpressionUUID->"bf920eb7-46d6-4d2c-b55c-dbd576c946e8"],
Cell[12723, 348, 181, 3, 34, "Output",ExpressionUUID->"ddb9a736-36fb-4a9f-8bca-9623234dc2f4"],
Cell[12907, 353, 182, 3, 34, "Output",ExpressionUUID->"8678c81f-7bef-44e4-bbe6-3f04de7c6c42"],
Cell[13092, 358, 288, 7, 34, "Output",ExpressionUUID->"58060427-24a8-4190-b9a8-c1b91041c2dd"],
Cell[13383, 367, 288, 7, 34, "Output",ExpressionUUID->"7f795894-b72a-46b9-bc04-04878fc62e53"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13708, 379, 271, 6, 30, "Input",ExpressionUUID->"99343a89-9728-4619-aa1f-49f3cd311fc6"],
Cell[13982, 387, 196, 3, 34, "Output",ExpressionUUID->"84021bb7-74fe-4a3f-aee0-dd508ad7baef"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14215, 395, 269, 6, 30, "Input",ExpressionUUID->"77cbdc38-18a1-4a7b-a240-714b1b7476a2"],
Cell[14487, 403, 197, 3, 34, "Output",ExpressionUUID->"04bdd247-5b24-415f-ad8b-7d8d0abde172"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14721, 411, 368, 9, 30, "Input",ExpressionUUID->"8aee1118-01d7-4a9a-8c7a-1db9ec8979c4"],
Cell[15092, 422, 242, 5, 34, "Output",ExpressionUUID->"ce75b92d-af73-4a84-91f7-937d93754073"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15371, 432, 309, 8, 30, "Input",ExpressionUUID->"42331531-f9f0-4c17-b459-fc7c447fe654"],
Cell[15683, 442, 442, 9, 34, "Output",ExpressionUUID->"c69170b2-bc81-4c19-b171-a3cda497919a"]
}, Open  ]],
Cell[16140, 454, 287, 7, 30, "Input",ExpressionUUID->"4ebd60b5-6ac7-416d-954c-82e936aec784"],
Cell[16430, 463, 285, 7, 30, "Input",ExpressionUUID->"a8a4aa82-afd5-45ec-8714-345cc9da6f62"],
Cell[CellGroupData[{
Cell[16740, 474, 429, 12, 30, "Input",ExpressionUUID->"31f052b0-ff18-487f-bad2-772510aa4ab8"],
Cell[17172, 488, 218, 5, 34, "Output",ExpressionUUID->"5fbb2ffa-efba-46f1-bbc1-050afde3131c"]
}, Open  ]],
Cell[17405, 496, 154, 3, 30, "Input",ExpressionUUID->"62327862-8e3f-439d-81e1-e5537ce1f2e4"],
Cell[17562, 501, 154, 3, 30, "Input",ExpressionUUID->"0dc3b093-91e0-488c-9300-b40a5ce2baa7"],
Cell[17719, 506, 156, 3, 30, "Input",ExpressionUUID->"a6cba8fe-c93a-4f97-a422-6d670ad8bc14"],
Cell[17878, 511, 3781, 97, 472, "Text",ExpressionUUID->"142e1436-1cf3-4d5f-aeda-fc32e705bbbe"],
Cell[21662, 610, 756, 19, 127, "Text",ExpressionUUID->"fea3e592-1307-4eba-aeb2-5e8275e3d314"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22455, 634, 167, 3, 54, "Subsection",ExpressionUUID->"30f805c6-ae89-40e7-ac3d-6aebc3f1d4c8"],
Cell[22625, 639, 899, 14, 127, "Text",ExpressionUUID->"6f821b06-7bbd-4188-80ec-9c8467182186"],
Cell[23527, 655, 234, 5, 30, "Input",ExpressionUUID->"de3dfa75-5c50-41f9-bc87-748e771202a8"],
Cell[23764, 662, 341, 7, 35, "Text",ExpressionUUID->"cf9a06fd-3126-4e32-8171-ded4041d8334"],
Cell[24108, 671, 293, 6, 30, "Input",ExpressionUUID->"99abe068-37e2-4004-b00f-1fb5388fefbf"],
Cell[24404, 679, 71, 0, 35, "Text",ExpressionUUID->"e35d9af8-294e-4873-acd9-ffa490379854"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24512, 684, 151, 3, 54, "Subsection",ExpressionUUID->"3da264fc-1415-40ba-8c81-2a4d9986df7f"],
Cell[CellGroupData[{
Cell[24688, 691, 685, 14, 53, "ItemNumbered",ExpressionUUID->"0abf57cc-22bf-4909-80fe-dff08d08d430"],
Cell[25376, 707, 1693, 63, 53, "ItemNumbered",ExpressionUUID->"729adb95-835e-44fd-a449-e078755c538c"],
Cell[27072, 772, 514, 9, 32, "ItemNumbered",ExpressionUUID->"03b9b48b-0bc2-4405-b0ef-36ffbbbea620"],
Cell[27589, 783, 915, 18, 95, "ItemNumbered",ExpressionUUID->"99f083e6-ac08-4957-92bd-bdb1ad0b4d4b"],
Cell[28507, 803, 680, 16, 53, "ItemNumbered",ExpressionUUID->"571dedea-8807-4963-9bf9-fc1389c18d29"],
Cell[CellGroupData[{
Cell[29212, 823, 770, 16, 64, "SubitemNumbered",ExpressionUUID->"8dbea6a1-b9b3-45aa-82d9-74e1635a501d"],
Cell[29985, 841, 653, 15, 26, "SubitemNumbered",ExpressionUUID->"b680709a-c4f0-49de-bebf-0307bc821234"]
}, Open  ]],
Cell[30653, 859, 656, 14, 32, "ItemNumbered",ExpressionUUID->"728a55a8-7900-43ec-9a8d-51ebbdad507e"],
Cell[31312, 875, 588, 10, 32, "ItemNumbered",ExpressionUUID->"69e63bb8-c8db-41c5-b1b7-a938db3818fc"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[31961, 892, 152, 3, 67, "Section",ExpressionUUID->"b6272032-f273-4ca8-bcda-1620f7c4dc0b"],
Cell[32116, 897, 414, 6, 35, "Text",ExpressionUUID->"426bc1f5-3676-4dc5-b99a-583b08654b4d"],
Cell[CellGroupData[{
Cell[32555, 907, 689, 11, 53, "ItemNumbered",ExpressionUUID->"c2094772-d6aa-410e-bbc3-153187a9c5b2"],
Cell[33247, 920, 933, 15, 53, "ItemNumbered",ExpressionUUID->"3ac23931-069c-4559-ada7-513956eae5fb"],
Cell[34183, 937, 904, 14, 45, "SubitemNumbered",ExpressionUUID->"9c75ef4d-e04d-43d8-8831-f8ebb1cc80cc"],
Cell[35090, 953, 921, 15, 53, "ItemNumbered",ExpressionUUID->"553b07f0-7380-4a40-899d-88a74316e9a5"],
Cell[CellGroupData[{
Cell[36036, 972, 826, 13, 45, "SubitemNumbered",ExpressionUUID->"2227b1ca-b885-4ef0-876d-7edff2206bfc"],
Cell[36865, 987, 897, 14, 45, "SubitemNumbered",ExpressionUUID->"beae8688-229f-4fcd-bb4c-51e6c06fed7a"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[37823, 1008, 174, 3, 67, "Section",ExpressionUUID->"7af0a743-7176-4022-a8a6-2d8748a607c0"],
Cell[CellGroupData[{
Cell[38022, 1015, 191, 3, 54, "Subsection",ExpressionUUID->"931dbee6-5489-4142-a2dd-4426c1d1ec5d"],
Cell[38216, 1020, 279, 6, 35, "Text",ExpressionUUID->"a730943f-7d25-4f5d-b17a-a52b04a61bfa"],
Cell[38498, 1028, 736, 12, 32, "ItemNumbered",ExpressionUUID->"05b9f4d1-78a4-45d7-a84c-a12e25347e94"],
Cell[39237, 1042, 593, 15, 30, "Input",ExpressionUUID->"abeba0f5-8079-4da6-9242-cfe944d7563a"],
Cell[CellGroupData[{
Cell[39855, 1061, 939, 15, 45, "SubitemNumbered",ExpressionUUID->"f0cdfd28-4529-4c85-b56b-4cb0a91a96b0"],
Cell[40797, 1078, 910, 14, 45, "SubitemNumbered",ExpressionUUID->"3e45dfc9-f40c-4ddb-bae2-4d43f66e7d43"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41744, 1097, 840, 14, 32, "ItemNumbered",ExpressionUUID->"eeb2d3f7-3dbf-4e88-8293-c529866aeb81"],
Cell[42587, 1113, 861, 14, 26, "SubitemNumbered",ExpressionUUID->"ad2dfcfe-17e6-4c8a-b3d6-7e3374f7b97a"]
}, Open  ]],
Cell[43463, 1130, 667, 16, 52, "Input",ExpressionUUID->"9f054d80-b209-4f3a-9f2b-46a35bc67161"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44167, 1151, 159, 3, 54, "Subsection",ExpressionUUID->"9442e662-501a-4c21-a916-1c44195c28a6"],
Cell[44329, 1156, 667, 16, 52, "Input",ExpressionUUID->"453efa9e-371c-48c1-bbeb-144a22ce4793"],
Cell[44999, 1174, 340, 5, 32, "ItemNumbered",ExpressionUUID->"efec62ff-11d5-40db-a52d-a13ce741cd0a"],
Cell[45342, 1181, 577, 14, 52, "Input",ExpressionUUID->"cccbd472-c5f7-42bb-bd36-c740dbe69dc3"],
Cell[CellGroupData[{
Cell[45944, 1199, 396, 6, 26, "SubitemNumbered",ExpressionUUID->"56e49262-6a7b-4d5a-999b-f1f3a10d41d9"],
Cell[46343, 1207, 661, 11, 45, "SubitemNumbered",ExpressionUUID->"4352cc05-5b45-4b96-99c6-de2eb395a526"],
Cell[47007, 1220, 606, 11, 26, "SubitemNumbered",ExpressionUUID->"e5310eb3-6a91-49e0-ae7b-4402116f820d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47650, 1236, 550, 8, 32, "ItemNumbered",ExpressionUUID->"64d0495c-b30c-434a-a81c-b88536a963dc"],
Cell[CellGroupData[{
Cell[48225, 1248, 620, 11, 26, "SubitemNumbered",ExpressionUUID->"a872eee7-68f5-45d0-aa04-e5c6aa922931"],
Cell[48848, 1261, 572, 10, 26, "SubitemNumbered",ExpressionUUID->"fc2acb97-e8c9-47ad-a108-b30ff128faf6"],
Cell[49423, 1273, 599, 11, 26, "SubitemNumbered",ExpressionUUID->"c96f9135-4ceb-4744-b341-0efa47f46d2e"],
Cell[50025, 1286, 600, 11, 26, "SubitemNumbered",ExpressionUUID->"e8637324-aadd-43c8-a908-f2989b3586d8"]
}, Open  ]],
Cell[50640, 1300, 854, 13, 53, "ItemNumbered",ExpressionUUID->"45977650-49b4-4ae8-9108-cb0c405cdb12"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[51555, 1320, 218, 4, 67, "Section",ExpressionUUID->"14f43c79-0d7a-4c83-8f07-adfe5f5bfba8"],
Cell[51776, 1326, 866, 16, 81, "Text",ExpressionUUID->"0a85f32c-fc6e-4a0a-98be-ecfd23329594"],
Cell[CellGroupData[{
Cell[52667, 1346, 327, 7, 32, "Item",ExpressionUUID->"cda38311-1f57-44dc-aa01-bd7805abca8d"],
Cell[52997, 1355, 562, 11, 53, "Item",ExpressionUUID->"790c7530-5b45-48bf-b3fb-389d9d7cb176"],
Cell[53562, 1368, 496, 9, 53, "Item",ExpressionUUID->"495b1f9f-f96b-4898-9d92-239789c24ace"],
Cell[54061, 1379, 467, 9, 53, "Item",ExpressionUUID->"9b099dfc-5f9b-47ba-be83-5980e4c36f7e"],
Cell[54531, 1390, 314, 5, 32, "Item",ExpressionUUID->"37707684-05ed-4ba5-865a-2a2ca480054f"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

